# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$('[data-controller=stats][data-action=index]').ready ->
  google.charts.load('current', {
    'packages':['geochart'],
    'mapsApiKey': 'AIzaSyB8eNKKZK4hzLfeYxpidoFeggYMmoOLp0o'
  })

  listens_by_country = $("#app-data").data('listens-by-country')
  listens_by_country.unshift(["Country", "Sessions"])
  drawRegionsMap = () =>
    data = google.visualization.arrayToDataTable(listens_by_country)

    options = {}

    chart = new google.visualization.GeoChart(document.getElementById('regions_div'))

    chart.draw(data, options)

  google.charts.setOnLoadCallback(drawRegionsMap)

  start_at = $("#app-data").data('start-at')
  end_at = $("#app-data").data('end-at')
  new Calendar({
    element: $('.daterange--double'),
    earliest_date: '2000-01-1',
    latest_date: moment(),
    start_date: start_at,
    end_date: end_at,
    callback: () ->
      start = moment(this.start_date).format()
      end = moment(this.end_date).format()
      window.location = "/stats?start_at=#{encodeURIComponent(start)}&end_at=#{encodeURIComponent(end)}"
  })


  listens_by_day = $("#app-data").data("listens-by-day")
  listens_by_hour = $("#app-data").data("listens-by-hour")
  average_listening_times = $("#app-data").data("average-listening-times")

  ctx = document.getElementById("totalSessionsChart").getContext("2d")
  options = {
    legend: {
      display: false
    },
    scales: {
      yAxes: [{
        ticks: {
          min: 0,
          beginAtZero: true
          callback: (value, index, values) ->
            if (Math.floor(value) == value)
              return value
        }
      }]
    }
  }
  data = {
    labels: _.keys(listens_by_day)
    datasets: [
        {
            label: "listens",
            fillColor: "rgba(220,220,220,0.2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
            data: _.values(listens_by_day)
        },
    ]

  }
  totalSessionsChart = new Chart(ctx, { type: 'line', data: data, options: options })

  ctx = document.getElementById("sessionsPerHourChart").getContext("2d")
  data = {
    labels: _.keys(listens_by_hour)
    datasets: [
        {
            label: "listens",
            fillColor: "rgba(220,220,220,0.2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
            data: _.values(listens_by_hour)
        },
    ]

  }
  sessionsPerHourChart = new Chart(ctx, { type: 'line', data: data, options: options })

  ctx = document.getElementById("averageListeningTimeChart").getContext("2d")
  data = {
    labels: _.keys(average_listening_times)
    datasets: [
        {
            label: "listens",
            fillColor: "rgba(220,220,220,0.2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
            data: _.values(average_listening_times)
        },
    ]

  }
  averageListeningTimeChart = new Chart(ctx, { type: 'line', data: data, options: options })
